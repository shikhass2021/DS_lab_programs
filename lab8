
#include <stdio.h>
#include <string.h>
 
void search(char* pat, char* txt)
{
    int M = strlen(pat);
    int N = strlen(txt);
    int i;
 
    for (i= 0; i <= N - M; i++) {
        int j;
 
        for (j = 0; j < M; j++)
            if (txt[i + j] != pat[j])
                break;
 
        if (j == M) // if pat[0...M-1] = txt[i, i+1, ...i+M-1]
            printf("Pattern found at index %d \n", i);
    }
}
 

int main()
{
    char txt[] = "AABAACAADAABAAABAA";
    char pat[] = "AABA";
    search(pat, txt);
    return 0;
}


//PATTERN MATCHING USING KMP ALGORITHM

#include<stdio.h>
#include<string.h>
  
void computeLPSArray(char* pat, int M, int* lps);
  
// Prints occurrences of txt[] in pat[]
void KMPSearch(char* pat, char* txt)
{
    int M = strlen(pat);
    int N = strlen(txt);
  
    // create lps[] for holding  the longest prefix suffix for given pattern.
    int lps[M];
  
    computeLPSArray(pat, M, lps);
  
    int i = 0; // index for txting
    int j = 0; 
    while (i < N)
	 {
        if (pat[j] == txt[i])
		 {
            j++;
            i++;
        }
  
        if (j == M)
		 {
            printf("Found pattern at index %d ", i - j);
            j = lps[j - 1];
        }
  
        // mismatch after j matches
        else if (i < N && pat[j] != txt[i])
		 {
        
            if (j != 0)
                j = lps[j - 1];
            else
                i = i + 1;
        }
    }
}
  

void computeLPSArray(char* pat, int M, int* lps)
{
    // counting the length of the previous longest prefix suffix
    int len = 0;
  
    lps[0] = 0; 
    int i = 1;
    while (i < M) {
        if (pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        }
        else 
        {
            if (len != 0) {
                len = lps[len - 1];
  
               
            }
            else 
            {
                lps[i] = 0;
                i++;
            }
        }
    }
}
  
int main()
{
    char txt[] = "ABABDABACDABABCABAB";
    char pat[] = "ABABCABAB";
    KMPSearch(pat, txt);
    return 0;
}
